apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "grafana.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Values.server.name }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "grafana.server.fullname" . }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/dashboards-config: {{ include (print $.Template.BasePath "/dashboards-configmap.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.server.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
      labels:
        app: {{ template "grafana.fullname" . }}
        component: "{{ .Values.server.name }}"
        release: "{{ .Release.Name }}"
    spec:
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
  {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
  {{- end }}
      containers:
        - name: {{ template "grafana.name" . }}
          image: "{{ .Values.server.image }}"
          imagePullPolicy: {{ default "Always" .Values.server.imagePullPolicy }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}
                  key: grafana-admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}
                  key: grafana-admin-password
            {{- if .Values.server.installPlugins }}
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "grafana.server.fullname" . }}-config
                  key: grafana-install-plugins
            {{- end }}
            {{- if .Values.server.setGenericOauth.enabled }}
            - name:  GF_AUTH_GENERIC_OAUTH_ENABLED
              value: "true"
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}-oauth
                  key: client-id
            - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}-oauth
                  key: client-secret
            - name: GF_AUTH_GENERIC_OAUTH_SCOPES
              value: {{ .Values.server.setGenericOauth.scopes | quote }}
            - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
              value: {{ .Values.server.setGenericOauth.authUrl | quote }}
            - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
              value: {{ .Values.server.setGenericOauth.tokenUrl | quote }}
            - name: GF_AUTH_GENERIC_OAUTH_API_URL
              value: {{ .Values.server.setGenericOauth.apiUrl | quote }}
            # TODO: What about allowedDomains?
            - name: GF_AUTH_GENERIC_OAUTH_ALLOWSIGNUP
              value: {{ .Values.server.setGenericOauth.allowSignUp | quote }}
            {{- end }}
            # The following values are so that Oauth works correctly.
            # But they can be used for other reasons as well.
            # TODO: Might need to put a check that the value exists?
            - name:  GF_SERVER_DOMAIN
              value: {{ .Values.server.serverDomain | quote }}
            - name:  GF_SERVER_ROOT_URL
              value: {{ .Values.server.serverRootUrl | quote }}
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /login
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: {{ default "/etc/grafana" .Values.server.configLocalPath | quote }}
            - name: dashboard-volume
              mountPath: {{ default "/var/lib/grafana/dashboards" .Values.server.dashboardLocalPath | quote }}
            - name: storage-volume
              mountPath: {{ default "/var/lib/grafana" .Values.server.storageLocalPath | quote }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
      terminationGracePeriodSeconds: {{ default 300 .Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-config
        - name: dashboard-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dashs
        - name: storage-volume
      {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "grafana.server.fullname" . }}{{- end }}
      {{- else }}
          emptyDir: {}
      {{- end -}}
