type Customer {
  id: Int
  name: String
  comment: String
  private_key: String
  sshKeys: [SshKey]
  created: String
}

input CustomerInput {
  id: Int
  name: String!
  comment: String
  private_key: String
}

input DeleteCustomerInput {
  name: String!
}

input DeleteEnvironmentInput {
  name: String!
  project: String!
}

input DeleteNotificationSlackInput {
  name: String!
}

input DeleteOpenshiftInput {
  name: String!
}

input DeleteProjectInput {
  id: Int!
}

input DeleteSshKeyInput {
  name: String!
}

type Environment {
  id: Int
  name: String
  project: Project
  git_type: String
  environment_type: String
  openshift_projectname: String
  updated: String
  created: String
}

input EnvironmentInput {
  name: String!
  project: Int!
  git_type: GitType!
  environment_type: EnvType!
  openshift_projectname: String!
}

enum EnvType {
  PRODUCTION
  DEVELOPMENT
}

enum GitType {
  BRANCH
  PULLREQUEST
}

type Mutation {
  addProject(input: ProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): String
  addOrUpdateEnvironment(input: EnvironmentInput!): Environment
  deleteEnvironment(input: DeleteEnvironmentInput!): String
  addSshKey(input: SshKeyInput!): SshKey
  deleteSshKey(input: DeleteSshKeyInput!): String
  addCustomer(input: CustomerInput!): Customer
  deleteCustomer(input: DeleteCustomerInput!): String
  addOpenshift(input: OpenshiftInput!): Openshift
  deleteOpenshift(input: DeleteOpenshiftInput!): String
  addNotificationSlack(input: NotificationSlackInput!): NotificationSlack
  deleteNotificationSlack(input: DeleteNotificationSlackInput!): String
  addNotificationToProject(input: NotificationToProjectInput!): Project
  removeNotificationFromProject(input: RemoveNotificationFromProjectInput!): Project
  addSshKeyToProject(input: SshKeyToProjectInput!): Project
  removeSshKeyFromProject(input: RemoveSshKeyFromProjectInput!): Project
  addSshKeyToCustomer(input: SshKeyToCustomerInput!): Customer
  removeSshKeyFromCustomer(input: RemoveSshKeyFromCustomerInput!): Customer
  truncateTable(tableName: String!): String
}

union Notification = NotificationSlack

type NotificationSlack {
  id: Int
  name: String
  webhook: String
  channel: String
}

input NotificationSlackInput {
  name: String!
  webhook: String!
  channel: String!
}

input NotificationToProjectInput {
  project: String!
  notificationType: String!
  notificationName: String!
}

type Openshift {
  id: Int
  name: String
  console_url: String
  token: String
  router_pattern: String
  project_user: String
  ssh_host: String
  ssh_port: String
  created: String
}

input OpenshiftInput {
  id: Int
  name: String!
  console_url: String!
  token: String
  router_pattern: String
  project_user: String
  ssh_host: String
  ssh_port: String
}

type Project {
  id: Int
  name: String
  customer: Customer
  git_url: String
  notifications(type: String): [Notification]
  active_systems_deploy: String
  active_systems_remove: String
  branches: String
  production_environment: String
  pullrequests: Boolean
  openshift: Openshift
  sshKeys: [SshKey]
  environments: [Environment]
  created: String
}

input ProjectInput {
  id: Int
  name: String!
  customer: Int!
  git_url: String!
  openshift: Int!
  active_systems_deploy: String
  active_systems_remove: String
  branches: String
  pullrequests: Boolean
  production_environment: String
}

type Query {
  projectByName(name: String!): Project
  projectByGitUrl(gitUrl: String!): Project
  allProjects(createdAfter: String, gitUrl: String): [Project]
  allCustomers(createdAfter: String): [Customer]
  allOpenshifts: [Openshift]
}

input RemoveNotificationFromProjectInput {
  project: String!
  notificationType: String!
  notificationName: String!
}

input RemoveSshKeyFromCustomerInput {
  customer: String!
  sshKey: String!
}

input RemoveSshKeyFromProjectInput {
  project: String!
  sshKey: String!
}

type SshKey {
  id: Int
  name: String
  keyValue: String
  keyType: String
  created: String
}

input SshKeyInput {
  id: Int
  name: String!
  keyValue: String!
  keyType: SshKeyType
}

input SshKeyToCustomerInput {
  customer: String!
  sshKey: String!
}

input SshKeyToProjectInput {
  project: String!
  sshKey: String!
}

enum SshKeyType {
  SSH_RSA
  SSH_ED25519
}
