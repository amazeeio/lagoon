type Customer {
  id: Int
  name: String
  comment: String
  private_key: String
  sshKeys: [SshKey]
  created: String
}

input CustomerInput {
  id: Int
  name: String!
  comment: String
  private_key: String
}

scalar Date

input DeleteCustomerInput {
  name: String!
}

input DeleteEnvironmentInput {
  name: String!
  project: Int!
}

input DeleteNotificationRocketChatInput {
  name: String!
}

input DeleteNotificationSlackInput {
  name: String!
}

input DeleteOpenshiftInput {
  name: String!
}

input DeleteProjectInput {
  project: String!
}

input DeleteSshKeyInput {
  name: String!
}

enum DeployType {
  BRANCH
  PULLREQUEST
  PROMOTE
}

type EnviornmentHitsMonth {
  total: Int
}

type Environment {
  id: Int
  name: String
  project: Project
  deploy_type: String
  environment_type: String
  openshift_projectname: String
  updated: String
  created: String
  deleted: String
  hours_month(month: Date): EnvironmentHoursMonth
  storages: [EnvironmentStorage]
  storage_month(month: Date): EnvironmentStorageMonth
  hits_month(month: Date): EnviornmentHitsMonth
}

type EnvironmentHoursMonth {
  month: String
  hours: Int
}

input EnvironmentInput {
  name: String!
  project: Int!
  deploy_type: DeployType!
  environment_type: EnvType!
  openshift_projectname: String!
}

type EnvironmentStorage {
  id: Int
  environment: Environment
  persistent_storage_claim: String
  bytes_used: Float
  updated: String
}

input EnvironmentStorageInput {
  environment: Int!
  persistent_storage_claim: String!
  bytes_used: Int!
}

type EnvironmentStorageMonth {
  month: String
  bytes_used: Float
}

enum EnvType {
  PRODUCTION
  DEVELOPMENT
}

type Mutation {
  updateEnvironment(input: UpdateEnvironmentInput!): Environment
  updateSshKey(input: UpdateSshKeyInput!): SshKey
  updateNotificationRocketChat(input: UpdateNotificationRocketChatInput!): NotificationRocketChat
  updateNotificationSlack(input: UpdateNotificationSlackInput!): NotificationSlack
  updateOpenshift(input: UpdateOpenshiftInput!): Openshift
  updateCustomer(input: UpdateCustomerInput!): Customer
  updateProject(input: UpdateProjectInput!): Project
  addProject(input: ProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): String
  addOrUpdateEnvironment(input: EnvironmentInput!): Environment
  addOrUpdateEnvironmentStorage(input: EnvironmentStorageInput!): EnvironmentStorage
  deleteEnvironment(input: DeleteEnvironmentInput!): String
  addSshKey(input: SshKeyInput!): SshKey
  deleteSshKey(input: DeleteSshKeyInput!): String
  addCustomer(input: CustomerInput!): Customer
  deleteCustomer(input: DeleteCustomerInput!): String
  addOpenshift(input: OpenshiftInput!): Openshift
  deleteOpenshift(input: DeleteOpenshiftInput!): String
  addNotificationRocketChat(input: NotificationRocketChatInput!): NotificationRocketChat
  addNotificationSlack(input: NotificationSlackInput!): NotificationSlack
  deleteNotificationRocketChat(input: DeleteNotificationRocketChatInput!): String
  deleteNotificationSlack(input: DeleteNotificationSlackInput!): String
  addNotificationToProject(input: NotificationToProjectInput!): Project
  removeNotificationFromProject(input: RemoveNotificationFromProjectInput!): Project
  addSshKeyToProject(input: SshKeyToProjectInput!): Project
  removeSshKeyFromProject(input: RemoveSshKeyFromProjectInput!): Project
  addSshKeyToCustomer(input: SshKeyToCustomerInput!): Customer
  removeSshKeyFromCustomer(input: RemoveSshKeyFromCustomerInput!): Customer
  truncateTable(tableName: String!): String
}

union Notification = NotificationRocketChat | NotificationSlack

type NotificationRocketChat {
  id: Int
  name: String
  webhook: String
  channel: String
}

input NotificationRocketChatInput {
  name: String!
  webhook: String!
  channel: String!
}

type NotificationSlack {
  id: Int
  name: String
  webhook: String
  channel: String
}

input NotificationSlackInput {
  name: String!
  webhook: String!
  channel: String!
}

input NotificationToProjectInput {
  project: String!
  notificationType: NotificationType!
  notificationName: String!
}

enum NotificationType {
  SLACK
  ROCKETCHAT
}

type Openshift {
  id: Int
  name: String
  console_url: String
  token: String
  router_pattern: String
  project_user: String
  ssh_host: String
  ssh_port: String
  created: String
}

input OpenshiftInput {
  id: Int
  name: String!
  console_url: String!
  token: String
  router_pattern: String
  project_user: String
  ssh_host: String
  ssh_port: String
}

type Project {
  id: Int
  name: String
  customer: Customer
  git_url: String
  subfolder: String
  notifications(type: NotificationType): [Notification]
  active_systems_deploy: String
  active_systems_promote: String
  active_systems_remove: String
  branches: String
  production_environment: String
  auto_idle: Int
  storage_calc: Int
  pullrequests: String
  openshift: Openshift
  openshift_project_pattern: String
  sshKeys: [SshKey]
  environments(type: EnvType, include_deleted: Boolean): [Environment]
  created: String
}

input ProjectInput {
  id: Int
  name: String!
  customer: Int!
  git_url: String!
  subfolder: String
  openshift: Int!
  openshift_project_pattern: String
  active_systems_deploy: String
  active_systems_promote: String
  active_systems_remove: String
  branches: String
  pullrequests: String
  production_environment: String
  auto_idle: Int
  storage_calc: Int
}

type Query {
  customerByName(name: String!): Customer
  projectByName(name: String!): Project
  projectByGitUrl(gitUrl: String!): Project
  environmentByOpenshiftProjectName(openshiftProjectName: String!): Environment
  allProjects(createdAfter: String, gitUrl: String): [Project]
  allCustomers(createdAfter: String): [Customer]
  allOpenshifts: [Openshift]
  allEnvironments(createdAfter: String): [Environment]
}

input RemoveNotificationFromProjectInput {
  project: String!
  notificationType: NotificationType!
  notificationName: String!
}

input RemoveSshKeyFromCustomerInput {
  customer: String!
  sshKey: String!
}

input RemoveSshKeyFromProjectInput {
  project: String!
  sshKey: String!
}

type SshKey {
  id: Int
  name: String
  keyValue: String
  keyType: String
  created: String
}

input SshKeyInput {
  id: Int
  name: String!
  keyValue: String!
  keyType: SshKeyType
}

input SshKeyToCustomerInput {
  customer: String!
  sshKey: String!
}

input SshKeyToProjectInput {
  project: String!
  sshKey: String!
}

enum SshKeyType {
  SSH_RSA
  SSH_ED25519
}

type UnassignedNotification {
  id: Int
  name: String
  type: String
}

input UpdateCustomerInput {
  id: Int!
  patch: UpdateCustomerPatchInput!
}

input UpdateCustomerPatchInput {
  name: String
  comment: String
  private_key: String
  created: String
}

input UpdateEnvironmentInput {
  name: String!
  patch: UpdateEnvironmentPatchInput
}

input UpdateEnvironmentPatchInput {
  project: Int
  deploy_type: DeployType
  environment_type: EnvType
  openshift_projectname: String
}

input UpdateNotificationRocketChatInput {
  name: String!
  patch: UpdateNotificationRocketChatPatchInput
}

input UpdateNotificationRocketChatPatchInput {
  name: String
  webhook: String
  channel: String
}

input UpdateNotificationSlackInput {
  name: String!
  patch: UpdateNotificationSlackPatchInput
}

input UpdateNotificationSlackPatchInput {
  name: String
  webhook: String
  channel: String
}

input UpdateOpenshiftInput {
  id: Int!
  patch: UpdateOpenshiftPatchInput!
}

input UpdateOpenshiftPatchInput {
  name: String
  console_url: String
  token: String
  router_pattern: String
  project_user: String
  ssh_host: String
  ssh_port: String
}

input UpdateProjectInput {
  id: Int!
  patch: UpdateProjectPatchInput!
}

input UpdateProjectPatchInput {
  name: String
  customer: Int
  git_url: String
  subfolder: String
  active_systems_deploy: String
  active_systems_remove: String
  branches: String
  production_environment: String
  auto_idle: Int
  storage_calc: Int
  pullrequests: String
  openshift: Int
  openshift_project_pattern: String
}

input UpdateSshKeyInput {
  id: Int!
  patch: UpdateSshKeyPatchInput!
}

input UpdateSshKeyPatchInput {
  name: String
  keyValue: String
  keyType: SshKeyType
}
