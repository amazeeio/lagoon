import * as R from 'ramda';
import { sendToLagoonLogs } from '@lagoon/commons/src/logs';
import { createTaskTask } from '@lagoon/commons/src/tasks';
import { query } from '../../util/db';
import { pubSub } from '../../clients/pubSub';
import * as esClient from '../../clients/esClient';
import * as Sql from './sql';
import * as EVENTS from './events';
import * as projectSql from '../project/sql';
import * as environmentSql from '../environment/sql';
import { User, UserNotFoundError } from '../../models/user';

const injectLogs = async (task /* : Object */) => {
  if (!task.remoteId) {
    return {
      ...task,
      logs: null,
    };
  }

  try {
    const result = await esClient.search({
      index: 'lagoon-logs-*',
      sort: '@timestamp:desc',
      body: {
        query: {
          bool: {
            must: [
              { match_phrase: { 'meta.remoteId': task.remoteId } },
              { match_phrase: { 'meta.jobStatus': task.status } },
            ],
          },
        },
      },
    });

    if (!result.hits.total) {
      return {
        ...task,
        logs: null,
      };
    }

    return {
      ...task,
      logs: R.path(['hits', 'hits', 0, '_source', 'message'], result),
    };
  } catch (e) {
    return {
      ...task,
      logs: `There was an error loading the logs: ${e.message}`,
    };
  }
};

const Helpers = (sqlClient /* : MariaSQL */, UserModel, GroupModel) => ({
  addTask: async (
    {
      id,
      name,
      status,
      created,
      started,
      completed,
      environment,
      service,
      command,
      remoteId,
      execute,
      lagoonToken,
    } /* : { id?: number, name: string, status?: string, created?: string, started?: string, completed?: string, environment: number, service: string, command: string, remoteId?: string, execute: boolean, lagoonToken?: string } */,
  ) => {
    const {
      info: { insertId },
    } = await query(
      sqlClient,
      Sql.insertTask({
        id,
        name,
        status,
        created,
        started,
        completed,
        environment,
        service,
        command,
        remoteId,
      }),
    );

    let rows = await query(sqlClient, Sql.selectTask(insertId));
    const taskData = await injectLogs(R.prop(0, rows));

    pubSub.publish(EVENTS.TASK.ADDED, taskData);

    // Allow creating task data w/o executing the task
    if (execute === false) {
      return taskData;
    }

    rows = await query(
      sqlClient,
      environmentSql.selectEnvironmentById(taskData.environment),
    );
    const environmentData = R.prop(0, rows);

    rows = await query(
      sqlClient,
      projectSql.selectProject(environmentData.project),
    );
    const projectData = R.prop(0, rows);

    try {
      await createTaskTask({
        task: taskData,
        project: projectData,
        environment: environmentData,
        lagoonToken,
      });
    } catch (error) {
      sendToLagoonLogs(
        'error',
        projectData.name,
        '',
        'api:addTask',
        { taskId: taskData.id },
        `*[${projectData.name}]* Task not initiated, reason: ${error}`,
      );
    }

    return taskData;
  },
  getProjectMaintainer: async (projectName: string): Promise<User> => {
    let maintainer;
    try {
      maintainer = await UserModel.loadUserByUsername(`default-maintainer@${projectName}`);
    } catch(err) {
      if (err instanceof UserNotFoundError) {
        maintainer = await UserModel.addUser({
          email: `default-maintainer@${projectName}`,
          username: `default-maintainer@${projectName}`,
          comment: `autogenerated maintainer for project ${projectName}`,
        });
        const group = await GroupModel.loadGroupByName(`project-${projectName}`);
        await GroupModel.addUserToGroup(maintainer, group, 'maintainer');
      }
      else {
        throw err;
      }
    }

    return maintainer;
  },
  injectLogs,
});

module.exports = Helpers;