node {
  env.BRANCH = env.BRANCH_NAME.toLowerCase().replaceAll('%2f','-') // branch names are used for Docker images and could be uppercase or slashes, Docker doesn't like that, so we lower case them.
  env.BUILD_TAG = env.BUILD_TAG.toLowerCase().replaceAll('%2f','-').replaceAll('/','-')
  env.IMAGE = env.BUILD_TAG // Docker image that is built for testing
  env.SITEGROUP = "rest2tasks"
  env.NAME = "${env.SITEGROUP}-${env.BRANCH}"

  // Openshift does not really like names longer then 24 chars or ending in a hyphen.
  // This strips that, but also makes sure that if the string is already less then 24
  // characters, Java is not confused.
  // See: http://stackoverflow.com/questions/953527/java-substring-string-index-out-of-range
  env.SHORT_NAME = "${env.SITEGROUP}-${env.BRANCH}"
  if (env.SHORT_NAME.length() > 24) {
    env.SHORT_NAME = env.SHORT_NAME.substring(0, 24).replaceFirst(/[^a-z0-9]+$/, '');
  }

  // on Pull Requests builds we want to test against the base branch rabbigtmq
  // Jenkins fills the target into 'CHANGE_TARGET' env variable for pull request builds
  // on regular branch builds this env variable is empty.
  if (env.CHANGE_TARGET != null) {
      env.TARGET_BRANCH = env.CHANGE_TARGET.toLowerCase().replaceAll('%2f','-')
  } else {
      env.TARGET_BRANCH = env.BRANCH
  }

  env.RABBITMQ_HOST = "amazeeio:NYTVU4jdRMjRMmbRcC3JubDH8M34MrWeT3@rabbitmq-${env.TARGET_BRANCH}"

  env.OPENSHIFT_PROJECT = "amze-amazeeio-dev"
  env.OPENSHIFT_REGISTRY = "registry.appuio.ch"
  env.OPENSHIFT_CONSOLE = "https://console.appuio.ch"
  env.OPENSHIFT_TOKEN = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJhbXplLWFtYXplZWlvIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtdG9rZW4tN2FqNm8iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjFiNzVhYzdjLWM2NWMtMTFlNi1iNzU1LWZhMTYzZTNlYzczYSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDphbXplLWFtYXplZWlvOmplbmtpbnMifQ.DTJZCwpEXYgzyZJkCdqzkGGsHVAhMsBt8amri2tfPb_f96kelG9agUpnw7YFg0yi2lGFr8SSYL8Gvuxn4w01vWtsLsba289pRM9Hb_1ISatSSV539MwPGgi7fU7qzbM4g2iVb1imlBHImomJCWW2CIn5hAyUDxJwy9XvcHrj6Tb14_G6buKOriGBZz6xBi9YjNjxyy9YznV9XdSVxLsWB7EhnrRxoxIEieOWDZPqujomIAXs6tO7apag4MddYz-5Xu86VmyJ6dKNJeKvEHtWXT3O5IEj0HfvVFJyJE1JGp_-XgO88R8tX_r9f2IOO-zr1ON85nmJcL9FLdKhQ8gwQg"
  env.OPENSHIFT_APP_YAML = "development.app.yml"

  env.JENKINS_BLUE_URL = "${env.JENKINS_URL}/blue/organizations/jenkins/amazee.io%2F${env.SITEGROUP}/detail"

  if (env.BRANCH == 'master') {
    env.OPENSHIFT_APP_YAML = "production.app.yml"
    env.OPENSHIFT_PROJECT = "amze-amazeeio-prod"
  }

  stage ('Build Info') {
     sh 'env | sort'
  }

  stage ('Checkout') {
     checkout scm
  }

  stage ('build image') {
    try {
      sh "docker build --pull -t ${env.IMAGE} -f Dockerfile ."
    } catch (e) {
      error(e, 'build image')
    }
  }

  // Building and Testing is done now, informing Devs about that.
  success('Deployment started...')

  // Updating the OpenShift Recources (they probably already exist, but in case we have some changes)
  // Tagging the new image, which will cause OpenShift to trigger a new deployment
  stage ('OpenShift: update Resources') {
    try {
      sh """docker run --rm -v $WORKSPACE/.openshift:/tmp -e OPENSHIFT_CONSOLE=${env.OPENSHIFT_CONSOLE} -e OPENSHIFT_TOKEN=${env.OPENSHIFT_TOKEN} amazeeio/oc sh -c 'oc process \
      -n ${env.OPENSHIFT_PROJECT} \
      -f /tmp/${env.OPENSHIFT_APP_YAML} \
      -v TAG=${env.BRANCH} \
      -v NAME=${env.NAME} \
      -v SHORT_NAME=${env.SHORT_NAME} \
      -v OPENSHIFT_PROJECT=${env.OPENSHIFT_PROJECT} \
      -v SITEGROUP=${env.SITEGROUP} \
      -v RABBITMQ_HOST=${env.RABBITMQ_HOST} \
      | oc apply -n ${env.OPENSHIFT_PROJECT} -f -'"""
    } catch (e) {
      error(e, 'OpenShift: update Resources')
    }
  }

  stage ('docker tag and push') {
    // The Docker Registry cannot handle multiple pushes at the same time, so we make sure that multiple Jenkins Jobs are not pushing at the same time
    lock("${env.SITEGROUP}-registry") {
      try {
        sh "docker tag ${env.IMAGE} ${env.OPENSHIFT_REGISTRY}/${env.OPENSHIFT_PROJECT}/${env.SITEGROUP}:${env.BRANCH}"
        sh "DOCKER_CONFIG=$WORKSPACE/.docker docker login -u=jenkins -p='${env.OPENSHIFT_TOKEN}' ${env.OPENSHIFT_REGISTRY}"
        sh "DOCKER_CONFIG=$WORKSPACE/.docker docker push ${env.OPENSHIFT_REGISTRY}/${env.OPENSHIFT_PROJECT}/${env.SITEGROUP}:${env.BRANCH}"
      } catch (e) {
        error(e, 'tag and push image')
      }
    }
  }





  // Using openshiftVerifyDeployment which will monitor the current deployment and only continue when it is done.
  stage ('OpenShift: deployment') {
    try {
      env.SKIP_TLS = true
      openshiftVerifyDeployment apiURL: "${env.OPENSHIFT_CONSOLE}", authToken: env.OPENSHIFT_TOKEN, depCfg: "${env.NAME}", namespace: "${env.OPENSHIFT_PROJECT}", replicaCount: '', verbose: 'false', verifyReplicaCount: 'false', waitTime: '15', waitUnit: 'min', SKIP_TLS: true
    } catch (e) {
      error(e, 'OpenShift: deployment')
    }
  }

  deployed()

}

def error(e, step) {
  currentBuild.result = "FAILED"
  url = "${env.JENKINS_BLUE_URL}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/pipeline"
  message = ":bangbang: *[${env.SITEGROUP}/${env.BRANCH_NAME}] &gt;${url}|Build #${env.BUILD_NUMBER}&gt; failed* \\nStep: ${step} "
  sendslack('danger', message)
  throw e
}

def success(message) {
  url = "${env.JENKINS_BLUE_URL}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/pipeline"
  message = ":white_check_mark: *[${env.SITEGROUP}/${env.BRANCH_NAME}] &lt;${url}|Build #${env.BUILD_NUMBER}&gt; passed* \\n${message} "
  sendslack('good', message)
}

def deployed() {
  url = "${env.JENKINS_BLUE_URL}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/pipeline"
  message = ":new: *[${env.SITEGROUP}/${env.BRANCH_NAME}] &lt;${url}|Build #${env.BUILD_NUMBER}&gt; deployed*"
  sendslack('good', message)
}

def sendslack(color, message) {
  slackSend channel: 'amazeeio-testing', color: color, message: message, teamDomain: 'amazee', token: 'xFWAhjdCiXO26K7KXMsBwGT4'
}